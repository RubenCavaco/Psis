import zmq
import score_update_pb2  # File generated by protoc

# Dictionary to store the scores
astronaut_scores = {}

# Configure ZeroMQ as a SUB client
context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect("tcp://localhost:5555")  # Connect to the server
socket.setsockopt_string(zmq.SUBSCRIBE, "scores")  # Subscribe to the "scores" topic

# Function to display the scores in the terminal
def display_scores():
    print("\033[H\033[J")  # Clear the terminal
    print("** Space High Scores **")
    print("{:<15} {:<10}".format("Astronauta", "Pontuação"))
    print("-" * 25)
    for astronaut, score in astronaut_scores.items():
        print("{:<15} {:<10}".format(chr(astronaut), score))

print("Aguardando atualizações de pontuações...")

# Receive and process updates in real-time
while True:
    try:
       # Receive the topic (discard) and the serialized message
        topic = socket.recv_string()
        msg = socket.recv()
        print(f"Mensagem recebida: {msg}")

        # Deserialize the message using Protocol Buffers
        score_updates = score_update_pb2.ScoreUpdates()
        score_updates.ParseFromString(msg)

        # Update scores
        for score_update in score_updates.scores:
            astronaut_scores[score_update.ch] = score_update.score

        # Update the display
        display_scores()
    except Exception as e:
        print(f"Erro ao processar a mensagem: {e}")